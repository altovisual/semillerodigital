"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { GraduationCap, LogOut, User, Bell, Calendar, FileText, Users, BarChart3, MoreHorizontal } from "lucide-react"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Progress } from "@/components/ui/progress"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { PieChart, Pie, Cell, ResponsiveContainer, LineChart, Line, XAxis, YAxis, Tooltip, Legend, BarChart, Bar, CartesianGrid } from "recharts"
import { useAuth } from "@/contexts/auth-context"
import { statusToKey, statusToLabel, statusToBadgeVariant } from "@/lib/classroom-status"
import { StatusChips } from "@/components/shared/status-chips"
import { GradeBadge } from "@/components/shared/grade-badge"
import Link from "next/link"
import { useSession } from "next-auth/react"
import { NotificationCenter } from "@/components/notifications/notification-center"
import { AdvancedReports } from "@/components/reports/advanced-reports"
import { notificationService } from "@/lib/notification-service"
import { ThemeToggle } from "@/components/theme-toggle"
import { ProfileMenu } from "@/components/profile-menu"
import { FullPageSkeleton } from "@/components/shared/full-page-skeleton"
import { UserAvatar } from "@/components/shared/user-avatar"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"

// Mock data for the coordinator dashboard
const studentData = [
  {
    id: 1,
    name: "Carlos Rodríguez",
    avatar: "/placeholder-w3xp6.png",
    progress: 85,
    onTime: 12,
    late: 2,
    missing: 1,
    cohort: "Desarrollo Web - 2025 Q1",
  },
  {
    id: 2,
    name: "María González",
    avatar: "/student-maria.png",
    progress: 92,
    onTime: 15,
    late: 1,
    missing: 0,
    cohort: "Desarrollo Web - 2025 Q1",
  },
  {
    id: 3,
    name: "Juan Pérez",
    avatar: "/placeholder-y1fn1.png",
    progress: 78,
    onTime: 10,
    late: 3,
    missing: 2,
    cohort: "Diseño UX/UI - 2025 Q1",
  },
  {
    id: 4,
    name: "Ana Martínez",
    avatar: "/student-ana.jpg",
    progress: 95,
    onTime: 18,
    late: 0,
    missing: 0,
    cohort: "Data Science - 2024 Q4",
  },
  {
    id: 5,
    name: "Diego López",
    avatar: "/student-diego.jpg",
    progress: 67,
    onTime: 8,
    late: 4,
    missing: 3,
    cohort: "Desarrollo Web - 2025 Q1",
  },
  {
    id: 6,
    name: "Sofia Herrera",
    avatar: "/student-sofia.jpg",
    progress: 88,
    onTime: 14,
    late: 2,
    missing: 1,
    cohort: "Diseño UX/UI - 2025 Q1",
  },
]

const deliveryStatusData = [
  { name: "A Tiempo", value: 77, color: "hsl(var(--success))" },
  { name: "Atrasadas", value: 12, color: "hsl(var(--warning))" },
  { name: "Faltantes", value: 7, color: "hsl(var(--destructive))" },
]

const attendanceData = [
  { week: "Sem 1", attendance: 88 },
  { week: "Sem 2", attendance: 92 },
  { week: "Sem 3", attendance: 89 },
  { week: "Sem 4", attendance: 94 },
]

type FilterType = "Todos" | "Entregado" | "Atrasado" | "Faltante"

const ALL_TEACHER_COURSES = "__ALL_OF_TEACHER__"

export function CoordinatorDashboard() {
  const [selectedCohort, setSelectedCohort] = useState("")
  const [selectedTeacher, setSelectedTeacher] = useState("")
  const [activeFilter, setActiveFilter] = useState<FilterType>("Todos")
  const [activeTab, setActiveTab] = useState("overview")
  const [profileOpen, setProfileOpen] = useState(false)
  const [logoutOpen, setLogoutOpen] = useState(false)
  const { user, logout, switchRole } = useAuth()
  const router = useRouter()
  const { data: session, status: sessionStatus } = useSession()
  const isMock = process.env.NEXT_PUBLIC_MOCK_MODE === "true"

  // Classroom live data state
  const [gcCourses, setGcCourses] = useState<Array<{ id?: string | null; name?: string | null; section?: string | null; ownerId?: string | null }>>([])
  const [gcSelectedCourseId, setGcSelectedCourseId] = useState<string>("")
  const [gcStudents, setGcStudents] = useState<Array<{ userId?: string | null; profile?: { id?: string | null; name?: string | null; email?: string | null; photoUrl?: string | null } }>>([])
  const [gcLoading, setGcLoading] = useState(false)
  const [gcError, setGcError] = useState<string | null>(null)
  const [bootstrapped, setBootstrapped] = useState(false)
  const [gcCoursework, setGcCoursework] = useState<Array<{ id?: string | null; title?: string | null; maxPoints?: number | null }>>([])
  const [gcSelectedWorkId, setGcSelectedWorkId] = useState<string>("")
  const [gcSubmissions, setGcSubmissions] = useState<Array<{ id?: string | null; userId?: string | null; state?: string | null; late?: boolean | null; assignedGrade?: number | null; alternateLink?: string | null; updateTime?: string | null }>>([])
  const [gcAllSubmissions, setGcAllSubmissions] = useState<Record<string, Array<{ userId?: string | null; state?: string | null; late?: boolean | null }>>>({})
  const [stuWorkPage, setStuWorkPage] = useState(1)
  // Paginación de alumnos
  const [stuPage, setStuPage] = useState<number>(1)
  const pageSize = 20
  const cohortOptions = gcCourses
    .filter((c) => !selectedTeacher || (c.ownerId ? c.ownerId === selectedTeacher : true))
    .map((c) => ({
      id: String(c.id || ""),
      label: `${c.name || c.id}${c.section ? ` - ${c.section}` : ""}`,
    }))
  const [gcTeachers, setGcTeachers] = useState<Array<{ userId?: string | null; profile?: { name?: string | null; email?: string | null } }>>([])

  // Load Classroom courses helper
  const reloadCourses = async () => {
    try {
      setGcLoading(true)
      
        // Si seleccionamos 'Todos los cursos del profesor', unificar alumnos
        if (selectedTeacher && gcSelectedCourseId === ALL_TEACHER_COURSES) {
          const cResp = await fetch("/api/classroom/courses")
          if (!cResp.ok) throw new Error(`HTTP ${cResp.status}`)
          const cData = await cResp.json()
          const teacherCourses = (cData.courses || []).filter((c: any) => c.ownerId === selectedTeacher)
          const studentsSets: Record<string, boolean> = {}
          const merged: Array<any> = []
          await Promise.all(teacherCourses.map(async (c: any) => {
            const r = await fetch(`/api/classroom/courses/${c.id}/students`).catch(() => null)
            if (!r || !r.ok) return
            const j = await r.json()
            for (const s of (j.students || [])) {
              const key = String(s.userId || s.profile?.id || Math.random())
              if (!studentsSets[key]) {
                studentsSets[key] = true
                merged.push(s)
              }
            }
          }))
          setGcStudents(merged)
          setGcCoursework([])
          setGcSelectedWorkId("")
          setGcSubmissions([])
          setGcAllSubmissions({})
          return
        }
        // teachers
        const tResp = await fetch(`/api/classroom/courses/${gcSelectedCourseId}/teachers`).catch(() => null)
        if (tResp && tResp.ok) {
          const tData = await tResp.json()
          setGcTeachers(tData.teachers || [])
        } else {
          setGcTeachers([])
        }
        const resp = await fetch(`/api/classroom/courses/${gcSelectedCourseId}/students`)
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`)
        const data = await resp.json()
        setGcStudents(data.students || [])

        // Also load coursework for this course
        const cwResp = await fetch(`/api/classroom/courses/${gcSelectedCourseId}/coursework`)
        if (!cwResp.ok) throw new Error(`HTTP ${cwResp.status}`)
        const cwData = await cwResp.json()
        setGcCoursework(cwData.coursework || [])
        if ((cwData.coursework || []).length > 0) {
          setGcSelectedWorkId(cwData.coursework[0].id || "")
        } else {
          setGcSelectedWorkId("")
          setGcSubmissions([])
        }

        // Load submissions for all coursework to aggregate per-student progress
        const allSubs: Record<string, Array<{ userId?: string | null; state?: string | null; late?: boolean | null }>> = {}
        await Promise.all((cwData.coursework || []).map(async (w: any) => {
          const r = await fetch(`/api/classroom/courses/${gcSelectedCourseId}/submissions?courseworkId=${w.id}`)
          if (!r.ok) return
          const json = await r.json()
          allSubs[String(w.id)] = (json.submissions || []).map((s: any) => ({ userId: s.userId, state: s.state, late: s.late }))
        }))
        setGcAllSubmissions(allSubs)
      } catch (e: any) {
        setGcError(e?.message || "No se pudieron cargar los alumnos")
      } finally {
        setGcLoading(false)
        setBootstrapped(true)
      }
    }
    loadStudentsAndCoursework()
  }, [gcSelectedCourseId])

  useEffect(() => { setStuWorkPage(1) }, [gcSelectedCourseId, gcSelectedWorkId])

  // Reiniciar página al cambiar de curso y al cambiar el número de alumnos
  useEffect(() => { setStuPage(1) }, [gcSelectedCourseId])
  useEffect(() => { setStuWorkPage(1) }, [gcSelectedCourseId, gcSelectedWorkId])
  useEffect(() => {
    const maxPage = Math.max(1, Math.ceil((gcStudents.length || 0) / pageSize))
    if (stuPage > maxPage) setStuPage(1)
  }, [gcStudents.length])
// Load submissions when coursework changes
  useEffect(() => {
    if (!gcSelectedCourseId || !gcSelectedWorkId) return
    const loadSubmissions = async () => {
      try {
        setGcLoading(true)
        setGcError(null)
        const resp = await fetch(`/api/classroom/courses/${gcSelectedCourseId}/submissions?courseworkId=${gcSelectedWorkId}`)
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`)
        const data = await resp.json()
        setGcSubmissions(data.submissions || [])
      } catch (e: any) {
        setGcError(e?.message || "No se pudieron cargar las entregas")
      } finally {
        setGcLoading(false)
      }
    }
    loadSubmissions()
  }, [gcSelectedCourseId, gcSelectedWorkId])

  const handleSendNotification = async (studentId: number) => {
    console.log("[v0] Sending notification to student:", studentId)

    const student = studentData.find((s) => s.id === studentId)
    if (student) {
      try {
        await notificationService.sendTaskReminderNotification(
          `${student.name.toLowerCase().replace(" ", ".")}@email.com`,
          "Tarea pendiente",
          24,
        )
        alert("Notificación enviada exitosamente")
      } catch (error) {
        alert("Error al enviar notificación")
      }
    }
  }

  const handleViewDetails = (studentId: number) => {
    console.log("[v0] Viewing details for student:", studentId)
    router.push(`/students/${studentId}`)
  }

  const filteredStudents = studentData.filter((student) => {
    if (selectedCohort && student.cohort !== selectedCohort) return false
    if (activeFilter === "Entregado" && student.missing > 0) return false
    if (activeFilter === "Atrasado" && student.late === 0) return false
    if (activeFilter === "Faltante" && student.missing === 0) return false
    return true
  });


  // Aggregated counts for current coursework selection (used by Estado chips)
  const statusCounts = (() => {
    let completed = 0, overdue = 0, missing = 0, total = 0
    for (const stu of gcStudents) {
      const sub = gcSubmissions.find((s) => s.userId === stu.userId)
      total++
      if (sub && (sub.state === 'TURNED_IN' || sub.state === 'RETURNED')) completed++
      else if (sub && sub.late) overdue++
      else missing++
    }
    return { total, completed, overdue, missing }
  })();

  // Derivados de paginación
  const totalStudents = gcStudents.length
  const totalPages = Math.max(1, Math.ceil(totalStudents / pageSize))
  const safePage = Math.min(Math.max(1, stuPage), totalPages)
  const startIdx = (safePage - 1) * pageSize
  const endIdx = Math.min(startIdx + pageSize, totalStudents)
  const paginatedStudents = gcStudents.slice(startIdx, endIdx)

  // Serie real de progreso del curso (por semanas según dueDate de coursework)
  const courseProgressSeries = (() => {
    try {
      const studentsCount = gcStudents.length || 0
      if (!studentsCount) return [] as Array<{ week: string; progress: number }>
      const works = (gcCoursework || [])
        .map((w: any) => ({
          id: String(w.id),
          title: w.title || String(w.id),
          dueDate: w?.dueDate ? new Date(w.dueDate.year, (w.dueDate.month || 1) - 1, w.dueDate.day || 1) : null,
        }))
        .filter((w) => !!w.dueDate)
        .sort((a, b) => (a.dueDate!.getTime() - b.dueDate!.getTime()))

      if (works.length === 0) return []

      const totalPossible = studentsCount * works.length
      let completedSoFar = 0
      const series: Array<{ week: string; progress: number }> = []

      for (let i = 0; i < works.length; i++) {
        const w = works[i]
        const subs = gcAllSubmissions[String(w.id)] || []
        const completedForWork = subs.filter((s: any) => s.state === 'TURNED_IN' || s.state === 'RETURNED').length
        completedSoFar += completedForWork
        const denom = studentsCount * (i + 1)
        const pct = denom > 0 ? Math.round((completedSoFar / denom) * 100) : 0
        series.push({ week: `Sem ${i + 1}`, progress: pct })
      }
      return series
    } catch {
      return [] as Array<{ week: string; progress: number }>
    }
  })();

  return (
    <div className="min-h-screen bg-background text-foreground">
      {/* Header */}
      <header className="sticky top-0 z-50 border-b border-border bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60">
        <div className="flex flex-col gap-2 sm:flex-row sm:h-16 sm:items-center sm:justify-between px-4 sm:px-6 py-2">
          <div className="flex items-center gap-3">
            <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-primary">
              <GraduationCap className="h-5 w-5 text-primary-foreground" />
            </div>
            <h1 className="text-xl font-semibold text-balance">Semillero Digital Tracker</h1>
            {isMock && <Badge variant="outline" className="ml-2">Mock Mode</Badge>}
            <span className="text-sm bg-primary/10 text-primary px-2 py-1 rounded-full">Coordinador</span>
          </div>

          <div className="flex items-center gap-4">
            <Select
              value={user?.role}
              onValueChange={(role) => {
                switchRole(role as any)
                router.replace(`/dashboard/${role}`)
              }}
            >
              <SelectTrigger className="w-40">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="coordinator">Coordinador</SelectItem>
                <SelectItem value="teacher">Profesor</SelectItem>
                <SelectItem value="student">Estudiante</SelectItem>
              </SelectContent>
            </Select>

            <NotificationCenter />

            <ThemeToggle />

            <ProfileMenu user={user!} onLogout={() => logout()} />
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <div className="border-b border-border bg-card px-4 sm:px-6 py-3 sm:py-4">
        <div className="flex gap-2 sm:gap-4 overflow-x-auto whitespace-nowrap">
          <Button variant={activeTab === "overview" ? "secondary" : "ghost"} onClick={() => setActiveTab("overview")}>
            <Users className="h-4 w-4 mr-2" />
            Resumen
          </Button>
          <Button variant={activeTab === "reports" ? "secondary" : "ghost"} onClick={() => setActiveTab("reports")}>
            <BarChart3 className="h-4 w-4 mr-2" />
            Reportes Avanzados
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <main className="p-6">
        {activeTab === "overview" && (
          <div className="space-y-6">
            {/* Quick Actions (live data) */}
            <div className="grid gap-4 md:grid-cols-4">
              <Card className="cursor-pointer hover:bg-accent/50 transition-colors">
                <CardContent className="flex items-center gap-3 p-4">
                  <Users className="h-8 w-8 text-primary" />
                  <div>
                    <p className="text-sm font-medium">Total Estudiantes</p>
                    <p className="text-2xl font-bold">{gcStudents.length}</p>
                  </div>
                </CardContent>
              </Card>
              <Card className="cursor-pointer hover:bg-accent/50 transition-colors">
                <CardContent className="flex items-center gap-3 p-4">
                  <FileText className="h-8 w-8 text-primary" />
                  <div>
                    <p className="text-sm font-medium">Tareas del Curso</p>
                    <p className="text-2xl font-bold">{gcCoursework.length}</p>
                  </div>
                </CardContent>
              </Card>
              <Card className="cursor-pointer hover:bg-accent/50 transition-colors">
                <CardContent className="flex items-center gap-3 p-4">
                  <Calendar className="h-8 w-8 text-primary" />
                  <div>
                    <p className="text-sm font-medium">Pendientes (Tarea seleccionada)</p>
                    <p className="text-2xl font-bold">{gcSelectedWorkId ? gcSubmissions.filter((s) => !(s.state === "TURNED_IN" || s.state === "RETURNED")).length : 0}</p>
                  </div>
                </CardContent>
              </Card>
              <Card className="cursor-pointer hover:bg-accent/50 transition-colors">
                <CardContent className="flex items-center gap-3 p-4">
                  <Bell className="h-8 w-8 text-primary" />
                  <div>
                    <p className="text-sm font-medium">Course ID</p>
                    <p className="text-xs text-muted-foreground truncate max-w-[10rem]">{gcSelectedCourseId || "—"}</p>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Progreso del Curso (real) */}
            <Card>
              <CardHeader>
                <CardTitle className="text-balance">Progreso del Curso</CardTitle>
              </CardHeader>
              <CardContent>
                {courseProgressSeries.length === 0 ? (
                  <div className="text-sm text-muted-foreground">No hay suficientes datos para calcular el progreso.</div>
                ) : (
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={courseProgressSeries} margin={{ left: 8, right: 8 }}>
                        <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="var(--border)" />
                        <XAxis dataKey="week" axisLine={false} tickLine={false} stroke="var(--border)" tick={{ fill: 'var(--muted-foreground)' }} />
                        <YAxis hide={false} stroke="var(--border)" tick={{ fill: 'var(--muted-foreground)' }} />
                        <Tooltip contentStyle={{ background: 'var(--card)', border: '1px solid var(--border)', color: 'var(--foreground)' }} labelStyle={{ color: 'var(--muted-foreground)' }} />
                        <Legend wrapperStyle={{ color: 'var(--foreground)' }} />
                        <Line
                          type="monotone"
                          dataKey="progress"
                          name="Progreso"
                          stroke="hsl(var(--primary))"
                          strokeWidth={3}
                          dot={{ fill: 'hsl(var(--primary))', strokeWidth: 2, r: 5 }}
                          activeDot={{ r: 7, stroke: 'var(--foreground)', strokeWidth: 1 }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Student Progress Table (live aggregated) */}
            <Card>
              <CardHeader>
                
              <CardContent>
                {/* Filtros de Cohorte/Profesor */}
                <div className="flex flex-col gap-3 mb-4 sm:flex-row sm:items-center sm:gap-3">
                  {/* Cohorte */}
                  <div className="flex items-center gap-2">
                    <label className="text-sm font-medium">Cohorte:</label>
                    <Select value={gcSelectedCourseId} onValueChange={(v) => { setGcSelectedCourseId(v); setSelectedCohort(v) }}>
                      <SelectTrigger className="w-full sm:w-64">
                        <SelectValue placeholder="Seleccionar cohorte" />
                      </SelectTrigger>
                      <SelectContent>
                        {cohortOptions.map((o) => (
                          <SelectItem key={o.id} value={o.id}>{o.label}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Profesor */}
                  <div className="flex items-center gap-2">
                    <label className="text-sm font-medium">Profesor:</label>
                    <Select value={selectedTeacher} onValueChange={setSelectedTeacher}>
                      <SelectTrigger className="w-full sm:w-64">
                        <SelectValue placeholder={gcTeachers.length > 0 ? "Seleccionar profesor" : "No disponible"} />
                      </SelectTrigger>
                      <SelectContent>
                        {gcTeachers.map((t, idx) => (
                          <SelectItem key={t.userId || String(idx)} value={t.userId || String(idx)}>
                            {t.profile?.name || t.profile?.email || t.userId}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                                {/* Mobile cards */}
                <div className="sm:hidden space-y-3">
                  {gcStudents.length === 0 ? (
                    <div className="text-sm text-muted-foreground">No hay alumnos para este curso.</div>
                  ) : (
                    paginatedStudents.map((s) => {
                      const fullName = s.profile?.name || s.userId || "-"
                      const email = s.profile?.email || "-"
                      const totalWorks = gcCoursework.length || 0
                      let completed = 0
                      let overdue = 0
                      let pending = 0
                      for (const w of gcCoursework) {
                        const subs = gcAllSubmissions[String(w.id)] || []
                        const mine = subs.find((x) => x.userId === s.userId)
                        if (!mine) {
                          pending += 1
                        } else if (mine.state === "TURNED_IN" || mine.state === "RETURNED") {
                          completed += 1
                        } else if (mine.late) {
                          overdue += 1
                        } else {
                          pending += 1
                        }
                      }
                      const pct = totalWorks > 0 ? Math.round((completed / totalWorks) * 100) : 0
                      return (
                        <div key={s.userId || email} className="rounded-lg border p-3 bg-card">
                          <div className="flex items-center gap-3">
                            <UserAvatar name={fullName} email={email} photoUrl={s.profile?.photoUrl || null} size={40} />
                            <div className="min-w-0">
                              <div className="font-medium truncate">{fullName}</div>
                              <div className="text-xs text-muted-foreground truncate">{email}</div>
                            </div>
                          </div>
                          <div className="mt-3 space-y-2">
                            <div className="flex items-center justify-between text-xs">
                              <span className="text-muted-foreground">Progreso</span>
                              <span className="font-medium">{pct}%</span>
                            </div>
                            <Progress value={pct} />
                            <div className="flex items-center gap-4 text-xs">
                              <span className="text-green-400">Completadas: {completed}</span>
                              <span className="text-amber-400">Atrasadas: {overdue}</span>
                              <span className="text-red-400">Pendientes: {pending}</span>
                            </div>
                          </div>
                        </div>
                      )
                    })
                  )}
                </div>

                {/* Desktop table */}<Table className="hidden sm:table">
                  <TableHeader>
                    <TableRow>
                      <TableHead>Estudiante</TableHead>
                      <TableHead>Email</TableHead>
                      <TableHead>Progreso</TableHead>
                      <TableHead>Completadas</TableHead>
                      <TableHead>Atrasadas</TableHead>
                      <TableHead>Pendientes</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {gcStudents.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={6}>
                          <span className="text-sm text-muted-foreground">No hay alumnos para este curso.</span>
                        </TableCell>
                      </TableRow>
                    ) : (
                      paginatedStudents.map((s) => {
                        const fullName = s.profile?.name || s.userId || "-"
                        const email = s.profile?.email || "-"
                        const totalWorks = gcCoursework.length || 0
                        let completed = 0
                        let overdue = 0
                        let pending = 0
                        for (const w of gcCoursework) {
                          const subs = gcAllSubmissions[String(w.id)] || []
                          const mine = subs.find((x) => x.userId === s.userId)
                          if (!mine) {
                            pending += 1
                          } else if (mine.state === "TURNED_IN" || mine.state === "RETURNED") {
                            completed += 1
                          } else if (mine.late) {
                            overdue += 1
                          } else {
                            pending += 1
                          }
                        }
                        const pct = totalWorks > 0 ? Math.round((completed / totalWorks) * 100) : 0
                        return (
                          <TableRow key={s.userId || email}>
                            <TableCell>
                              <div className="flex items-center gap-3">
                                <UserAvatar name={fullName} email={email} photoUrl={s.profile?.photoUrl || null} size={32} />
                                <span className="font-medium">{fullName}</span>
                              </div>
                            </TableCell>
                            <TableCell>
                              <span className="text-sm text-muted-foreground">{email}</span>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center gap-3">
                                <Progress value={pct} className="w-20" />
                                <span className="text-sm font-medium">{pct}%</span>
                              </div>
                            </TableCell>
                            <TableCell><span className="text-green-400 font-medium">{completed}</span></TableCell>
                            <TableCell><span className="text-amber-400 font-medium">{overdue}</span></TableCell>
                            <TableCell><span className="text-red-400 font-medium">{pending}</span></TableCell>
                          </TableRow>
                        )
                      })
                    )}
                  </TableBody>
                </Table>
                {/* Controles de paginación */}
                {totalStudents > pageSize && (
                  <div className="mt-4 flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">Mostrando {startIdx + 1}–{endIdx} de {totalStudents}</span>
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm" disabled={safePage <= 1} onClick={() => setStuPage((p) => Math.max(1, p - 1))}>
                        Anterior
                      </Button>
                      <span className="text-sm">Página {safePage} / {totalPages}</span>
                      <Button variant="outline" size="sm" disabled={safePage >= totalPages} onClick={() => setStuPage((p) => Math.min(totalPages, p + 1))}>
                        Siguiente
                      </Button>
                    </div>
                  </div>
                )}            </Card>
            
            {/* Entrega por alumno (solo si hay curso específico) */}
            {selectedTeacher && gcSelectedCourseId !== ALL_TEACHER_COURSES && gcSelectedCourseId && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-balance">Entrega por alumno</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Selector de Tarea */}
                  <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-3">
                    <div className="flex items-center gap-2">
                      <label className="text-sm font-medium">Tarea:</label>
                      <Select value={gcSelectedWorkId} onValueChange={setGcSelectedWorkId}>
                        <SelectTrigger className="w-full sm:w-80">
                          <SelectValue placeholder={gcLoading ? "Cargando tareas..." : "Seleccionar tarea"} />
                        </SelectTrigger>
                        <SelectContent>
                          {gcCoursework.map((w) => (
                            <SelectItem key={w.id || "unknown"} value={w.id || ""}>
                              {w.title || w.id}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    {gcCoursework.length === 0 && (
                      <span className="text-sm text-muted-foreground">Este curso no tiene tareas aún.</span>
                    )}
                  </div>

                  {/* Status summary */}
                  {gcSelectedWorkId && (
                    <StatusChips items={gcSubmissions.map((s) => ({ state: s.state, late: s.late }))} className="mt-2" />
                  )}

                  {/* Filtros de Estado */}
                  <div className="flex flex-wrap items-center gap-2">
                    <Button
                      variant={activeFilter === "Todos" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setActiveFilter("Todos")}
                    >
                      Todos ({statusCounts.total})
                    </Button>
                    <Button
                      variant={activeFilter === "Entregado" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setActiveFilter("Entregado")}
                    >
                      Entregado ({statusCounts.completed})
                    </Button>
                    <Button
                      variant={activeFilter === "Atrasado" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setActiveFilter("Atrasado")}
                    >
                      Atrasado ({statusCounts.overdue})
                    </Button>
                    <Button
                      variant={activeFilter === "Faltante" ? "default" : "outline"}
                      size="sm"
                      onClick={() => setActiveFilter("Faltante")}
                    >
                      Faltante ({statusCounts.missing})
                    </Button>
                  </div>

                  {/* Tabla de entregas */}
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Alumno</TableHead>
                          <TableHead>Email</TableHead>
                          <TableHead>Estado</TableHead>
                          <TableHead>Tarde</TableHead>
                          <TableHead>Nota</TableHead>
                          <TableHead>Enlace</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {gcLoading ? (
                          <TableRow>
                            <TableCell colSpan={6}>
                              <span className="text-sm text-muted-foreground">Cargando entregas...</span>
                            </TableCell>
                          </TableRow>
                        ) : gcSelectedWorkId && gcSubmissions.length === 0 ? (
                          <TableRow>
                            <TableCell colSpan={6}>
                              <span className="text-sm text-muted-foreground">No hay entregas para esta tarea.</span>
                            </TableCell>
                          </TableRow>
                        ) : (
                          (() => {
                            const work = gcCoursework.find((w) => String(w.id) === String(gcSelectedWorkId))
                            const rows = gcStudents.map((stu, idx) => {
                              const sub = gcSubmissions.find((s) => s.userId === stu.userId)
                              const state = sub?.state || "NO_SUBMISSION"
                              const late = sub?.late || false
                              const key = statusToKey(state, late)
                              const label = statusToLabel(key)
                              const variant = statusToBadgeVariant(key)
                              return {
                                key: sub?.id || ${stu.userId || "u"}-10869,
                                name: stu.profile?.name || stu.userId || "-",
                                email: stu.profile?.email || "-",
                                state,
                                late,
                                label,
                                variant,
                                assignedGrade: sub?.assignedGrade ?? null,
                                link: sub?.alternateLink || null,
                                work,
                              }
                            })

                            const filtered = rows.filter((r) => {
                              if (activeFilter === "Todos") return true
                              if (activeFilter === "Entregado") return r.state === "TURNED_IN" || r.state === "RETURNED"
                              if (activeFilter === "Atrasado") return !!r.late
                              if (activeFilter === "Faltante") return r.state === "NO_SUBMISSION"
                              return true
                            })
                            const pageSize = 20;
                            const totalRows = filtered.length;
                            const totalWorkPages = Math.max(1, Math.ceil(totalRows / pageSize));
                            const safeWorkPage = Math.min(Math.max(1, stuWorkPage), totalWorkPages);
                            const wStart = (safeWorkPage - 1) * pageSize;
                            const wEnd = Math.min(wStart + pageSize, totalRows);
                            const paginatedRows = filtered.slice(wStart, wEnd);

                            return paginatedRows.map((r) => (
                              <TableRow key={r.key}>
                                <TableCell>{r.name}</TableCell>
                                <TableCell><span className="text-sm text-muted-foreground">{r.email}</span></TableCell>
                                <TableCell>
                                  <span class={inline-flex items-center px-2 py-1 rounded border text-xs }>
                                    {r.label}
                                  </span>
                                </TableCell>
                                <TableCell>{r.late ? "Sí" : "No"}</TableCell>
                                <TableCell>
                                  <GradeBadge assigned={r.assignedGrade} maxPoints={(r.work?.maxPoints as number | null) ?? null} />
                                </TableCell>
                                <TableCell>
                                  <div className="flex items-center gap-3">
                                    {r.link ? (
                                      <a href={r.link} target="_blank" rel="noreferrer" className="text-primary underline">Abrir</a>
                                    ) : (
                                      <span className="text-sm text-muted-foreground">-</span>
                                    )}
                                  </div>
                                </TableCell>
                              </TableRow>
                            ))
                          })()
                        )}
                      </TableBody>
                    </Table>
                    
                    {/* Controles de paginación para Entrega por alumno */}
                    {(() => {
                      const work = gcCoursework.find((w) => String(w.id) === String(gcSelectedWorkId))
                      const rows = gcStudents.map((stu, idx) => {
                        const sub = gcSubmissions.find((s) => s.userId === stu.userId)
                        const state = sub?.state || "NO_SUBMISSION"
                        const late = sub?.late || false
                        return { state, late }
                      })
                      const filtered = rows.filter((r) => {
                        if (activeFilter === "Todos") return true
                        if (activeFilter === "Entregado") return r.state === "TURNED_IN" || r.state === "RETURNED"
                        if (activeFilter === "Atrasado") return !!r.late
                        if (activeFilter === "Faltante") return r.state === "NO_SUBMISSION"
                        return true
                      })
                      const pageSize = 20
                      const totalRows = filtered.length
                      const totalWorkPages = Math.max(1, Math.ceil(totalRows / pageSize))
                      const safeWorkPage = Math.min(Math.max(1, stuWorkPage), totalWorkPages)
                      const wStart = (safeWorkPage - 1) * pageSize
                      const wEnd = Math.min(wStart + pageSize, totalRows)
                      
                      return totalRows > pageSize ? (
                        <div className="mt-4 flex items-center justify-between">
                          <span className="text-sm text-muted-foreground">Mostrando {wStart + 1}–{wEnd} de {totalRows}</span>
                          <div className="flex items-center gap-2">
                            <Button variant="outline" size="sm" disabled={safeWorkPage <= 1} onClick={() => setStuWorkPage((p) => Math.max(1, p - 1))}>
                              Anterior
                            </Button>
                            <span className="text-sm">Página {safeWorkPage} / {totalWorkPages}</span>
                            <Button variant="outline" size="sm" disabled={safeWorkPage >= totalWorkPages} onClick={() => setStuWorkPage((p) => Math.min(totalWorkPages, p + 1))}>
                              Siguiente
                            </Button>
                          </div>
                        </div>
                      ) : null
                    })()}
                  </div>
                </CardContent>
              </Card>
            )}
            
            {/* Mensaje cuando está en modo multi-curso */}
            {selectedTeacher && gcSelectedCourseId === ALL_TEACHER_COURSES && (
              <Card>
                <CardContent className="p-6 text-center">
                  <p className="text-muted-foreground">Selecciona un curso específico para ver tareas y entregas individuales.</p>
                </CardContent>
              </Card>
            )}
            {/* Quick Reports */}
            <div className="space-y-4">
              <h2 className="text-xl font-semibold text-balance">Reportes Rápidos</h2>
              <div className="grid gap-6 md:grid-cols-2">
                {/* Delivery Status Chart (Donut mejorado) */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-balance">Estado General de Entregas</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {(() => {
                      let completed = 0
                      let overdue = 0
                      let pending = 0
                      for (const w of gcCoursework) {
                        const subs = gcAllSubmissions[String(w.id)] || []
                        for (const s of subs) {
                          if (s.state === "TURNED_IN" || s.state === "RETURNED") completed++
                          else if (s.late) overdue++
                          else pending++
                        }
                      }
                      const total = completed + overdue + pending
                      const data = [
                        { name: "Completadas", value: completed, color: "hsl(var(--success))" },
                        { name: "Atrasadas", value: overdue, color: "hsl(var(--warning))" },
                        { name: "Pendientes", value: pending, color: "hsl(var(--destructive))" },
                      ]
                      return (
                        <div className="h-64 relative">
                          <ResponsiveContainer width="100%" height="100%">
                            <PieChart>
                              <Tooltip formatter={(v: any, n: string) => [`${v}`, n]} contentStyle={{ background: 'var(--card)', border: '1px solid var(--border)', color: 'var(--foreground)' }} labelStyle={{ color: 'var(--muted-foreground)' }} />
                              <Legend wrapperStyle={{ color: 'var(--foreground)' }} />
                              <Pie data={data} cx="50%" cy="50%" innerRadius={70} outerRadius={110} paddingAngle={2} dataKey="value">
                                {data.map((entry, i) => (
                                  <Cell key={i} fill={entry.color} />
                                ))}
                              </Pie>
                            </PieChart>
                          </ResponsiveContainer>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <div className="text-center">
                              <div className="text-2xl font-bold">{total}</div>
                              <div className="text-xs text-muted-foreground">Total entregas</div>
                            </div>
                          </div>
                        </div>
                      )
                    })()}
                  </CardContent>
                </Card>

                {/* Estados por Tarea (Barras Apiladas) */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-balance">Estados por Tarea</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {(() => {
                      // Construye dataset por tarea
                      const rows = (gcCoursework || []).slice(0, 8).map((w) => {
                        const subs = gcAllSubmissions[String(w.id)] || []
                        let completed = 0, overdue = 0, pending = 0
                        for (const s of subs) {
                          if (s.state === "TURNED_IN" || s.state === "RETURNED") completed++
                          else if (s.late) overdue++
                          else pending++
                        }
                        return { name: w.title || String(w.id), Completadas: completed, Atrasadas: overdue, Pendientes: pending }
                      })
                      if (rows.length === 0) return <div className="text-sm text-muted-foreground">No hay tareas para este curso.</div>
                      return (
                        <div className="h-64">
                          <ResponsiveContainer width="100%" height="100%">
                            <BarChart data={rows} margin={{ left: 8, right: 8 }}>
                              <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="var(--border)" />
                              <XAxis dataKey="name" tick={{ fontSize: 12, fill: 'var(--muted-foreground)' }} stroke="var(--border)" hide={false} interval={0} angle={-15} textAnchor="end" height={60} />
                              <YAxis stroke="var(--border)" tick={{ fill: 'var(--muted-foreground)' }} />
                              <Tooltip contentStyle={{ background: 'var(--card)', border: '1px solid var(--border)', color: 'var(--foreground)' }} labelStyle={{ color: 'var(--muted-foreground)' }} />
                              <Legend wrapperStyle={{ color: 'var(--foreground)' }} />
                              <Bar dataKey="Completadas" stackId="a" fill="hsl(var(--success))" />
                              <Bar dataKey="Atrasadas" stackId="a" fill="hsl(var(--warning))" />
                              <Bar dataKey="Pendientes" stackId="a" fill="hsl(var(--destructive))" />
                            </BarChart>
                          </ResponsiveContainer>
                        </div>
                      )
                    })()}
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        )}

        {activeTab === "reports" && <AdvancedReports compact />}
      </main>
    </div>
  )
}













